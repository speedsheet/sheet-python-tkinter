# <#>tkinter<> SpeedSheet
<b>Find what you need, faster.<>


# Summary

tkinter (Tk interface) is Python's interface to Tcl/Tk.


### Online References

Official:
<l>https://docs.python.org/3/library/tkinter.html<>

Documents:
<l>https://tkdocs.com/<>

Reference:
<l>https://tkdocs.com/shipman/<>



### Install - PIP

<cb>pip3 install tk<>



### Install - PIP Requirements.txt

File Name:

<cb>requirements.txt<>

Add:

<cb>tk<>



### Install - MacOS / Homebrew

If tk doesn't work on your mac, run this Homebrew command:

<cb>brew install python-tk@3.<v>version<><>

Python 3.10:

<cb>brew install python-tk@3.10<>



### Import

<cb>from tkinter import *<>
@
@ tkinter



# Hello World


### Hello World - Basic

<cb>from tkinter import Tk
from tkinter.ttk import Button, Label

<v>window<> = Tk()

<v>label_1<> = Label(<v>window<>, text = '<v>Hello<>')
<v>label_1<>.pack()

<v>button_1<> = Button(<v>window<>, text = 'Quit', command = <v>window<>.destroy)
<v>button_1<>.pack()

<v>window<>.mainloop()<>



### Hello World - With Input

<cb>from tkinter import Frame, StringVar, Tk, E, N, S, W
from tkinter.ttk import Button, Entry, Label

class <v>Application<>(Tk):

    def __init__(self, *args, **kwargs):

        super().__init__(*args, **kwargs)
        self.title("Hello World")
        self.geometry("600x100")
        self.resizable(width = False, height = False)

        <v>HelloWorld<>(self).grid(sticky = (E + W + N + S))
        self.columnconfigure(0, weight = 1)

class <v>HelloWorld<>(Frame):

    def __init__(self, parent, *args, **kwargs):

        super().__init__(parent, *args, **kwargs)

        self.<v>name<> = StringVar()
        self.<v>hello_message<> = StringVar(value = "Hello!")

        <v>name_label<> = Label(self, text = "<v>Name<>")
        <v>name_textbox<> = Entry(self, textvariable = self.<v>name<>)
        <v>name_button<> = Button(self, text = "<v>Set<>", command = self.set_name)

        <v>hello_label<> = Label(self, textvariable = self.<v>hello_message<>)

        <v>name_label<>.grid(row = <v>0<>, column = <v>0<>, sticky = <v>W<>)
        <v>name_textbox<>.grid(row = <v>0<>, column = <v>1<>, sticky = (<v>E<> + <v>W<>))
        <v>name_button<>.grid(row = <v>0<>, column = <v>2<>, sticky = <v>E<>)
        <v>hello_label<>.grid(row = <v>1<>, column = <v>1<>, columnspan = <v>3<>)

        self.columnconfigure(1, weight=1)

    def set_name(self):

        if self.<v>name<>.get():
            self.<v>hello_message<>.set("Hello " + self.<v>name<>.get())
        else:
            self.<v>hello_message<>.set("Hello World")

app = Application()
app.mainloop()<>


# Component Structure

Application
Window
Widget


# Button
@
@ buttons, button()


### Button - Create

<cb>= Button(<v>container_1<>, command = <v>function_1<>, text = '<v>Button Text<>')<>

Usage:

<cb>from tkinter.ttk import Button

= Button(<v>container_1<>, command = <v>function_1<>, text = '<v>Button Text<>', state='disabled')<>

Example:

<cb><v>button_exit<> = Button(<v>main_form<>, command = <v>exit_function<>, text = '<v>Exit<>')<>
@
@ tkinter.ttk.button()
@ new, instantiate, define



### Button - Action - Pass Argument

<cb>button_1 = Button(<v>...<>,
		command = lambda: <v>action_function<>(<v>arg_1<>, <v>arg_2<>, <v>...<>))<>
@
@ parameters, arguments



### Button - Enable / Disable

<cb><v>button_1<>.config(state = 'disable')<>

<cb><v>button_1<>.config(state = 'enable')<>
@
@ button.config(), .config()



### Button - Update Properties

<cb><v>button_1<>.config(<v>properties<>)<>
@
@ button.config(), .config()



### Button - Update Text

Update Text:

<cb><v>button_1<>.config(text = '<v>New Label<>')<>
@
@ button.config(), .config()



# Canvas


### Canvas - Create

<cb>= Canvas()<>

Full Usage:

<cb>from tkinter import Canvas

= Canvas(bg = <v>background_color<>)<>


Creates a canvas to draw on.


Example:

<cb>from tkinter import Tk
from tkinter import Canvas

<v>window_1<> = Tk()

<v>canvas<> = Canvas(<v>window_1<>)
<v>canvas<>.configure(bg = '<v>#404040<>')
<v>canvas<>.pack(fill = 'both', expand = True)

<v>window_1<>.mainloop()<>
@
@ new, instantiate, define, bg



### Canvas - Add Image

<cb>= <v>canvas_1<>.create_image(<v>x<>, <v>y<>, image = <v>image_1<>)<>

<cb>from PIL.ImageTk import PhotoImage

<v>tk_image<> = PhotoImage(<v>pil_image<>)
= <v>canvas_1<>.create_image(<v>x<>, <v>y<>, image = <v>tk_image<>)<>


Adds an image to a canvas.


<m>Example Needed<>
@
@ .create_image(), imagetk, pil



### Canvas - Draw Arc

<cb> = <v>canvas_1<>.create_arc(<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>, style = 'arc', start = <v>start_angle<>, extent = <v>arc_angle<>, fill = <v>color<>)

<m>What is 0˚, What is 90˚. Draws anti-clockwise<>

<m>Needs Example<>
@
@ canvas.create_arc(), .create_arc()



### Canvas - Draw Circle

Use:

<cb>= <v>canvas_1<>.create_oval(<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>, fill = <v>colour<>)<>

Usage:

<cb>= <v>canvas_1<>.create_oval(<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>, fill = <v>colour<>)
= <v>canvas_1<>.create_oval(<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>, fill = <v>colour<>, outline = <v>color<>, width = <v>width<>)<>


To draw a circle, draw an oval with height = width.


Example:

<cb>from tkinter import Tk
from tkinter import Canvas

<v>window_1<> = Tk()
<v>window_1<>.geometry("<v>256<>x<v>160<>")

<v>canvas<> = Canvas(<v>window_1<>)
<v>canvas<>.configure(bg = '<v>#404040<>')
<v>canvas<>.pack(fill = 'both', expand = True)

<v>canvas<>.create_oval(<v>58<>, <v>10<>, <v>198<>, <v>150<>,
        fill = 'lime', outline = '<v>white<>', width = <v>2<>)

<v>window_1<>.mainloop()<>
@
@ canvas.create_val(), .create_val()



### Canvas - Draw Line

<cb>= <v>canvas_1<>.create_line(<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>, fill = <v>colour<>)<>

Usage:

<cb>= <v>canvas_1<>.create_line(<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>, fill = <v>colour<>)
= <v>canvas_1<>.create_line(<v>...<>, width = <v>width<>)
= <v>canvas_1<>.create_line(<v>...<>, dash = <v>dash_type<>)<>

Dash Types:

<in-2><c>dash_len
gap_len<><>


Draws a line.


Example:

<cb>from tkinter import Tk
from tkinter import Canvas

<v>window_1<> = Tk()
<v>window_1<>.geometry("<v>256<>x<v>160<>")

<v>canvas<> = Canvas(<v>window_1<>)
<v>canvas<>.configure(bg = '<v>#404040<>')
<v>canvas<>.pack(fill = 'both', expand = True)

<v>canvas<>.create_line(<v>28<>, <v>10<>, <v>228<>, <v>150<>, fill = 'lime', width = <v>2<>)

<v>window_1<>.mainloop()<>
@
@ canvas.create_line(), .create_line(), fill, dash
@ lines



### Canvas - Draw Oval

<cb>= <v>canvas_1<>.create_oval(<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>, fill = <v>colour<>)<>

Usage:

<cb>= <v>canvas_1<>.create_oval(<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>, fill = <v>colour<>)
= <v>canvas_1<>.create_oval(<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>, fill = <v>colour<>, outline = <v>color<>, width = <v>width<>)<>


Draws a filled oval, ellipse or circle.


Example:

<cb>from tkinter import Tk
from tkinter import Canvas

<v>window_1<> = Tk()
<v>window_1<>.geometry("<v>256<>x<v>160<>")

<v>canvas<> = Canvas(<v>window_1<>)
<v>canvas<>.configure(bg = '<v>#404040<>')
<v>canvas<>.pack(fill = 'both', expand = True)

<v>canvas<>.create_oval(<v>58<>, <v>10<>, <v>198<>, <v>150<>,
        fill = 'lime', outline = '<v>white<>', width = <v>2<>)

<v>window_1<>.mainloop()<>
@
@ .create_oval(), fill
@ circles, ellipses, ovals



### Canvas - Draw Point

Use:

<cb>= <v>canvas_1<>.create_oval(<v>x1<>, <v>y1<>, <v>x1<>, <v>y1<>, fill = <v>colour<>, width = 0)<>

Usage:

<cb>= <v>canvas_1<>.create_oval(<v>x1<>, <v>y1<>, <v>x1<>, <v>y1<>, fill = <v>colour<>, width = 0)<>


To draw a point, draw an oval with x1 = x2, y1 = y2.
Set width = 1.


Example:

<cb>from tkinter import Tk
from tkinter import Canvas

<v>window_1<> = Tk()
<v>window_1<>.geometry("<v>256<>x<v>160<>")

<v>canvas<> = Canvas(<v>window_1<>)
<v>canvas<>.configure(bg = '<v>#404040<>')
<v>canvas<>.pack(fill = 'both', expand = True)

<v>canvas<>.create_oval(<v>20<>, <v>10<>, <v>20<>, <v>10<>,
        fill = '<v>white<>', width = 0)

<v>window_1<>.mainloop()<>
@
@ dots



### Canvas - Draw Polygon

<cb>= <v>canvas_1<>.create_polygon(<v>points<>,
        fill = <v>color<>, outline = <v>color<>, width = <v>width<>)<>
@
@ .create_polygon(), fill, shape



### Canvas - Draw Text

<cb>= <v>canvas_1<>.create_text(<v>x<>, <v>y<>, '<v>Text<>', fill = <v>color<>, font = ('<v>Helvetica 16 bold<>'))<>


Adds text to a canvas.


<m>Example Needed<>
@
@ string, font

 

### Canvas - Draw Pie Slice

<cb> = <v>canvas_1<>.create_arc(<v>x1<>, <v>y1<>, <v>x2<>, <v>y2<>, style = 'pieslice', start = <v>start_angle<>, extent = <v>arc_angle<>, fill = <v>color<>)


<m>What is 0˚, What is 90˚. Draws anti-clockwise<>

<m>Needs Example<>
@
@ pieslice, 'pieslice'
@ packman, circumference, partial, semicircle, semi-circle
@ canvas.create_arc(), .create_arc()



### Canvas Item - Delete

<cb><v>canvas_1<>.delete(<v>item<>)<>


Deletes an item from a canvas.

<m>Example Needed<>
@
@ .delete(), animation, animate



### Canvas Item - Move

<cb><v>canvas_1<>.move(<v>item<>, <v>x_increment<>, <v>y_increment<>)<>


Moves an item across a canvas.

<m>Example Needed<>
@
@ .move(), animation, animate



# Frame

A container for widgets.

Controls the widgets' layout.
@
@ tkinter.frame


### Frame - Create

<cb>= Frame()<>

Full Usage:

<cb>from tkinter import Frame

= Frame()<>

<cb>from tkinter import Frame

class <v>Frame1<>(Frame):
    def __init__(self, parent, *args, **kwargs):
        super().__init__(parent, *args, **kwargs)

= <v>Frame1<>()<>
@
@ tkinter.frame(), .frame(), (Frame)



### Frame - Pack Horizontally, Vertically

<cb><v>frame_1<>.pack(<v>...<>)<>

Organizes frame components into horizontal, vertical boxes.



# Image


### Image - Display

<cb>= Label(self, image = <v>image_1<>)<>

Usages:

<cb>from tkinter.ttk import Label

<v>label_1<> = Label(self, image = <v>image_1<>)
<v>label_1<>.image = <v>image_1<><>


Use a label to display an image.
@
@ label()



### Image - Load

Use Pillow:

<cb>= PhotoImage(Image.open(<v>image_path<>))<>

Full Usage:

<cb>from PIL import Image
from tkinter import PhotoImage
<m>or<>
from PIL.ImageTk import PhotoImage

= PhotoImage(Image.open(<v>image_path<>))<>


Loads an image using Pillow and converts it to a tkinter image.
@
@ image.open(), .open()
@ read, load


# Label
@
@ text
@ tkinter.ttk.label(), ttk.label(), .label()


### Label - Create

<cb>= Label(<v>container_1<>, text='<v>Label Text<>')<>

<cb>from tkinter.ttk import Label

= Label(<v>container_1<>, text='<v>Label Text<>')<>
@
@ new, define, insantiate



# Layouts


### Layout - Grid

<cb>.grid(row = <v>row_number<>, column = <v>column_number<>)<>

<cb>.grid(row = <v>row_number<>, column = <v>column_number<>)
.grid(<v>...<>, columnspan = <v>number_of_columns<>)
.grid(<v>...<>, sticky = <v>direction<>)<>


Organizes components into a 2 dimensional grid.


<c>sticky<>:

<in><cb>from tkinter import E, N, S, W

= N
= S
= E
= W

= E + W
= N + E + S + W<><>
@
@ .grid()



### Layout - Pack

<cb>.pack()<>

Organizes components into horizontal ad vertical boxes.
@
@ .pack()



### Layout - Place

<cb>.place(<v>x<>, <v>y<>)<>

Places components using absolute positioning.
@
@ .place(), x, y, absolute position, coordinates



# Style


### Style - Create

<cb>= Style()<>

Usage:

<cb><v>style_1<> = Style()
<v>style_1<>.theme_use('<v>default<>')
<v>style_1<>.configure('<v>style_name<>', <v>property_name<>='<v>value<>')

Component(<v>...<>, style = '<v>style_name<>')<>


Example:

<cb>command = <v>function_1<>, text = '<v>Button Text<>' = Style()
command = <v>function_1<>, text = '<v>Button Text<>'.theme_use('default')
command = <v>function_1<>, text = '<v>Button Text<>'.configure('Ex1.TFrame', background='white')

Frame(<v>...<>, style='Ex1.TFrame')<>



# Text Box
@
@ text boxs, Entry(), Text()


## Text Box - Create



### Text Box - Single Line / Entry()

<cb><v>textbox_1<> = Entry(<v>container_1<>)<>



### Text Box - Multiline / Text()

<cb><v>textbox_1<> = Text(<v>container_1<>)<>



## Text Box - Operations



### Text Box - Append

<cb><v>textbox_1<>.insert (END, <v>new_text<>)<>

END - A tkinter constant.



### Text Box - Clear

<cb><v>textbox_1<>.delete (0, END)<>

END - A tkinter constant.



### Text Box - Insert

<cb><v>textbox_1<>.insert (<v>insert_point<>, <v>new_text<>)<>



# Widgets

A widget is any displayed ui element or a container for displayed ui elements.

<table><col>Button<><col>Action Button<>
<col>Canvas<><col>Displays Graphics and Images<>
<col>CheckButton<><col>Selects a Value<>
<col>ComboBox<><col>List of Selectable Values<>
<col>Entry<><col>Text Entry Box<>
<col>Frame<><col>Widget Container<>
<col>Label<><col>Displays Text or Graphics<>
<col>Menu<><col>Provides Menus<>
<col>Message<><col>Multiline Text Label<>
<col>RadioButton<><col>Selects From a Number of Value<>
<col>Scale<><col>Graphical Slider, Selects Within a Range <>
<col>Scrollbar<><col>Content Scroll Bar<>
<col>SpinBox<><col>Select From Range of Values<>
<col>Text<><col>Formatted Multiline Text Entry Box<><>



# Window
@
@ tkinter.TK



### Window - Basics



### Window - Create

<cb>= Tk()<>

Full Usage:

<cb>from tkinter import Tk

= Tk()<>

<cb>from tkinter import Tk

class <v>Window1<>(Tk):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)<>


Creates an instance of a TK Window.


Examples:

<cb>from tkinter import Tk

<v>window_1<> = Tk()
<v>window_1<>.mainloop()<>

<cb>from tkinter import Tk

class <v>Window1<>(Tk):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

<v>window_1<> = <v>Window1<>()
<v>window_1<>.mainloop()<>
@
@ tkinter.tk(), tk.tk(), (tk)
@ new, instantiate, define



### Window - Get Height

<cb>= <v>window_1<>.winfo_height()<>


Returns the window height in pixels.


Examples:

<cb>from tkinter import Tk

<v>window_1<> = <v>Tk<>()
<v>window_1<>.geometry("<v>512<>x<v>320<>")

print(<v>window_1<>.winfo_height())

<#># Prints: 320 <><>
@
@ .winfo_height(), winfo_height(), height()
@ size, dimensions



### Window - Get Width

<cb>= <v>window_1<>.winfo_width()<>


Returns the window width in pixels.


Examples:

<cb>from tkinter import Tk

<v>window_1<> = <v>Tk<>()
<v>window_1<>.geometry("<v>512<>x<v>320<>")

print(<v>window_1<>.winfo_width())

<#># Prints: 512 <><>
@
@ .winfo_width(), winfo_width(), width()
@ size, dimensions



### Window - Get Left Position

<cb>= <v>window_1<>.winfo_x()<>


Returns the x (left) value of the window's top left corner.


Examples:

<cb>from tkinter import Tk

<v>window_1<> = <v>Tk<>()
<v>window_1<>.geometry("+<v>512<>+<v>320<>")

print(<v>window_1<>.winfo_x())

<#># Prints: 512 <><>
@
@ .winfo_x(), winfo_x(), x
@ position, dimensions



### Window - Get Top Position

<cb>= <v>window_1<>.winfo_y()<>


Returns the y (top) value of the window's top left corner.


Examples:

<cb>from tkinter import Tk

<v>window_1<> = <v>Tk<>()
<v>window_1<>.geometry("+<v>512<>+<v>320<>")

print(<v>window_1<>.winfo_y())

<#># Prints: 320 <><>
@
@ .winfo_y(), winfo_y(), y
@ position, dimensions



### Window - Set Position

<cb><v>window_1<>.geometry('+<v>left<>+<v>top<>')<>


Sets the window's starting position.


Examples:

<cb>from tkinter import Tk

<v>window_1<> = <v>Tk<>()
<v>window_1<>.geometry("+<v>500<>+<v>300<>")
<v>window_1<>.mainloop()<>

<cb>from tkinter import Tk

class <v>Window1<>(Tk):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.geometry("+<v>500<>+<v>300<>")

<v>window_1<> = <v>Window1<>()
<v>window_1<>.mainloop()<>
@
@ tkinter.tk.geometry(), tk.tk.geometry(), tk.geometry(), .geometry()
@ dimensions, length, width, height, top, left, x, y



### Window - Set Size

<cb><v>window_1<>.geometry('<v>width<>x<v>height<>')<>


Sets the window's width and height.


Examples:

<cb>from tkinter import Tk

<v>window_1<> = <v>Tk<>()
<v>window_1<>.geometry("<v>512<>x<v>320<>")
<v>window_1<>.mainloop()<>

<cb>from tkinter import Tk

class <v>Window1<>(Tk):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.geometry("<v>512<>x<v>320<>")

<v>window_1<> = <v>Window1<>()
<v>window_1<>.mainloop()<>
@
@ tkinter.tk.geometry(), tk.tk.geometry(), tk.geometry(), .geometry()
@ dimensions, length, width, height



### Window - Set Size, Position

<cb><v>window_1<>.geometry('<v>width<>x<v>height<>+<v>left<>+<v>top<>')<>


Sets the window's size and position.


Examples:

<cb>from tkinter import Tk

<v>window_1<> = <v>Tk<>()
<v>window_1<>.geometry("<v>512<>x<v>320<>+<v>500<>+<v>300<>")
<v>window_1<>.mainloop()<>

<cb>from tkinter import Tk

class <v>Window1<>(Tk):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.geometry("<v>512<>x<v>320<>+<v>500<>+<v>300<>")

<v>window_1<> = <v>Window1<>()
<v>window_1<>.mainloop()<>
@
@ tkinter.tk.geometry(), tk.tk.geometry(), tk.geometry(), .geometry()
@ dimensions, length, width, height, top, left, x, y



### Window - Set Title

<cb><v>window_1<>.title('<v>Window Title<>')<>


Sets the window's title.


Examples:

<cb>from tkinter import Tk

<v>window_1<> = <v>Tk<>()
<v>window_1<>.title("Example Window")
<v>window_1<>.mainloop()<>

<cb>from tkinter import Tk

class <v>Window1<>(Tk):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.title("Example Window")

<v>window_1<> = <v>Window1<>()
<v>window_1<>.mainloop()<>
@
@ tkinter.tk.title(), tk.tk.title(), tk.title(), .title()



### Window - Show

<cb><v>window_1<>.mainloop()<>


Displays the window.


Examples:

<cb>from tkinter import Tk

<v>window_1<> = Tk()
<v>window_1<>.mainloop()<>

<cb>from tkinter import Tk

class <v>Window1<>(Tk):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

<v>window_1<> = <v>Window1<>()
<v>window_1<>.mainloop()<>
@
@ tk.tk.mainloop(), tk.mainloop(), .mainloop()



# Window Frame
@
@ tkinter.frame


### Window Frame - Create


# How To


### Animate With Delete, Redraw

Use:

<cb><v>canvas_1<>.delete(<v>canvas_item<>)
<v>window_1<>.update()<>


Draw the item on the canvas and save it to a variable.
Remove it by deleting it with <c>canvas.delete()<>.

Redraw the canvas with <c>window.update()<>.
The canvas tracks what remains and needs to be redrawn.


Example:

Draw Rotating Arc:

<cb>from tkinter import Tk
from tkinter import Canvas
from time import sleep

<v>INCREMENT<> = 7
<v>SLICE_ANGLE<> = 60
<v>SLEEP<> = 0.001

def <v>next<>(<v>previous<>):
    <v>angle<> = <v>previous<> + <v>INCREMENT<>
    return <v>angle<> if <v>angle<> \<= 360 else <v>angle<> - 360

class Window1(Tk):
    def __init__(self, <v>title<>, <v>size<>, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.title(<v>title<>)
        self.geometry(f'{<v>size<>[0]}x{<v>size<>[1]}')
        <v>canvas<> = Canvas(self)
        <v>canvas<>.configure(bg = '#404040')
        <v>canvas<>.pack(fill = 'both', expand = True)
        self.<v>canvas<> = <v>canvas<>

<v>window<> = Window1('Animation', (256, 160))
<v>canvas<> = window.canvas

<v>previous<> = None
<v>angle<> = 0

while True:

    if <v>previous<>:
        <v>canvas<>.delete(<v>previous<>)

    <v>angle<> = <v>next<>(<v>angle<>)
    <v>previous<> = canvas.create_arc(58, 10, 198, 150, style = 'pieslice', start = <v>angle<>, extent = <v>SLICE_ANGLE<>, fill = 'white', outline = None)
    window.update()
    sleep(<v>SLEEP<>)<>
@
@ canvas.delete(), delete()



### Animate With Move

Use:

<cb><v>canvas_1<>.move(<v>canvas_item<>, <v>x_increment<>, <v>y_increment<>)
<v>window_1<>.update()<>


Draw the item on the canvas and save it to a variable.
Move it with <c>canvas.move()<>.
You must calculate the move co-ordinates relative to the current position. These are NOT absolute values. <s>(why tkinter, why??!!)<>
Redraw with <c>window.update()<>.


Example:

Draw Rotating Arc:

<cb>from tkinter import Tk
from tkinter import Canvas
from math import sin, cos, radians
from time import sleep
from collections import namedtuple

Point = namedtuple('Point', ['x', 'y'])
Size = namedtuple('Size', ['width', 'height'])

<v>SCREEN_SIZE<> = Size(256, 160)
<v>CENTER<> = Point(128, 80)
<v>RADIUS<> = 50
<v>WIDTH<> = 5
<v>INCREMENT<> = 2
<v>SLEEP<> = 0.001

def calculate_diff(<v>previous<>, <v>next<>):
    return Point(<v>next<>.x - <v>previous<>.x, <v>next<>.y - <v>previous<>.y)

def calculate_position(<v>center<>, <v>radius<>, <v>angle<>):
    return Point(
        <v>center<>.x + sin(radians(<v>angle<>)) * <v>radius<>,
        <v>center<>.y + cos(radians(<v>angle<>)) * <v>radius<>)

class Window1(Tk):
    def __init__(self, <v>title<>, <v>size<>, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.title(<v>title<>)
        self.geometry(f'{<v>size<>.width}x{<v>size<>.height}')
        <v>canvas<> = Canvas(self)
        <v>canvas<>.configure(bg = '#404040')
        <v>canvas<>.pack(fill = 'both', expand = True)
        self.<v>canvas<> = canvas

<#># Setup Window, Background Graphics:<>

<v>window<> = Window1('Animation', SCREEN_SIZE)
<v>canvas<> = <v>window<>.<v>canvas<>
<v>center<> = <v>canvas<>.create_oval(<v>CENTER<>.x - <v>WIDTH<>, <v>CENTER<>.y - <v>WIDTH<>, <v>CENTER<>.x + <v>WIDTH<>, <v>CENTER<>.y + <v>WIDTH<>, fill = 'yellow', width = 0)
<v>orbit<> = <v>canvas<>.create_oval(<v>CENTER<>.x - <v>RADIUS<>, <v>CENTER<>.y - <v>RADIUS<>, <v>CENTER<>.x + <v>RADIUS<>, <v>CENTER<>.y + <v>RADIUS<>, fill = None, outline = '#C02020', width = 1)

<#># Setup Circle Being Animated:<>

<v>angle<> = 0
<v>position<> = calculate_position(<v>CENTER<>, <v>RADIUS<>, <v>angle<>)
<v>circle<> = canvas.create_oval(<v>position<>.x - <v>WIDTH<>, <v>position<>.y - <v>WIDTH<>, <v>position<>.x + <v>WIDTH<>, <v>position<>.y + <v>WIDTH<>, fill = 'lime', width = 0)
<v>window<>.update()

<#># Animate:<>

while True:

    <v>angle<> += <v>INCREMENT<>
    <v>next_position<> = calculate_position(<v>CENTER<>, <v>RADIUS<>, <v>angle<>)
    <v>diff<> = calculate_diff(<v>position<>, <v>next_position<>)
    <v>position<> = <v>next_position<>

    <v>canvas<>.move(<v>circle<>, <v>diff<>.x, <v>diff<>.y)
    <v>window<>.update()

    sleep(<v>SLEEP<>)<>
@
@ canvas.move(), move()



### Any - Disable

<cb><v>component_1<>.config (state='disabled')<>



### Any - Enable

<cb><v>component_1<>.config (state='normal')<>



### App - Quit

<cb><v>root<>.destroy()<>

Stops root.tmainloop() and exits the program.


Example:

With Button:

<cb>Button(<v>root<>, text = 'Quit', command = <v>root<>.destroy)<>
@
@ root.destroy(), .destroy(), button, exit, stop



### Colour Names

<cb>See: Colour Name Chart in help directory<>



### Styles

Use ttk imports.



### Themed Widgets - Import

<cb>from tkinter.ttk import <v>WidgetName<><>



# Color

By Hex Color

<cb>= '#FFF'<>

<cb>= '#FFFFFF'<>

By Name:

<cb>= 'Black'<>



# Acronyms


### Tcl
Tool Command Language


### TK
Tool Kit

### TTK



# Glossary


### Layout Managers
Grid, Pack, Place


#### Layout Manager - Grid
Organizes components into a 2 dimensional grid.


#### Layout Manager - Pack
Organizes components into horizontal and vertical boxes.


#### Layout Manager - Place
Places components using absolute positioning.


### Tool Command Language (Tcl)
A dynamic interpreted language used to talk to the Tk toolkit.
It is similar to python and commonly embedded into C applications.

Pronounced: tickle


### Tool Kit (TK)
A Tcl package used to create and manipulate GUI widgets.


### Themed Tool Kit (ttk)
Newer version of Tk widgets with improved appearance on different platforms.


### Widget
Any UI element that is displayed or provides user interactions.

Widgets are contained in a window.


### Widget Types
Containers, Children


